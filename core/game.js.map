{"version":3,"file":"game.js","sourceRoot":"","sources":["../src/core/game.ts"],"names":[],"mappings":"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","sourcesContent":["export interface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport type CompareGameFn<T, R> = (\n  tile_a: T | null,\n  tile_b: T | null\n) => R | undefined;\n\nexport type ReplaceFn<T> = (\n  tile: T | null,\n  x: number,\n  y: number\n) => T | undefined | null;\n\nexport interface AbstractGameData<\n  T = number,\n  M extends Dimensions = Dimensions\n> {\n  game_data: M;\n  data: T[][];\n}\n\nexport abstract class AbstractGame<\n  T = number,\n  M extends Dimensions = Dimensions\n> implements AbstractGameData<T, M> {\n  game_data: M;\n  data: T[][];\n\n  constructor(level_data: M, default_value: () => T) {\n    this.game_data = level_data;\n    this.data = new Array(this.game_data.height)\n      .fill(0)\n      .map(() => new Array(this.game_data.width).fill(0));\n    for (let i = 0; i < this.data.length; i++) {\n      const element = this.data[i];\n      for (let j = 0; j < element.length; j++) {\n        this.data[i][j] = default_value();\n      }\n    }\n  }\n\n  get_tile<T>(x: number, y: number, default_val: T | null = null) {\n    return this.data &&\n      y >= 0 &&\n      y < this.data.length &&\n      x >= 0 &&\n      x < this.data[y].length\n      ? this.data[y][x]\n      : default_val;\n  }\n\n  get_tile_nullsafe<T>(x: number, y: number, default_val: T) {\n    return this.data &&\n      y >= 0 &&\n      y < this.data.length &&\n      x >= 0 &&\n      x < this.data[y].length\n      ? this.data[y][x]\n      : default_val;\n  }\n\n  set_tile(x: number, y: number, value: T) {\n    return this.data ? (this.data[y][x] = value) : null;\n  }\n\n  replace_tiles_fn(fn: ReplaceFn<T>) {\n    for (let x = 0; x < this.game_data.width; x++) {\n      for (let y = 0; y < this.game_data.height; y++) {\n        const r = fn(this.get_tile_nullsafe(x, y, null), x, y);\n        r && this.set_tile(x, y, r);\n      }\n    }\n  }\n\n  replace_tiles(tile_from: T, tile_to: T) {\n    for (let x = 0; x < this.game_data.width; x++) {\n      for (let y = 0; y < this.game_data.height; y++) {\n        if (this.get_tile_nullsafe(x, y, null) == tile_from) {\n          this.set_tile(x, y, tile_to);\n        }\n      }\n    }\n  }\n\n  protected cloneInternal(game: AbstractGame<T>): AbstractGame<T> {\n    if (game.data) {\n      for (let i = 0; i < game.data.length; i++) {\n        for (let j = 0; j < game.data[i].length; j++) {\n          game.data[i][j] = this.data[i][j];\n        }\n      }\n    }\n    return game;\n  }\n\n  compare_with_game<R>(\n    game: AbstractGame<T>,\n    fn: CompareGameFn<T, R>,\n    default_value: R\n  ) {\n    for (let x = 0; x < this.game_data.width; x++) {\n      for (let y = 0; y < this.game_data.height; y++) {\n        const r = fn(\n          this.get_tile_nullsafe(x, y, null),\n          game.get_tile_nullsafe(x, y, null)\n        );\n        if (r !== undefined) return r;\n      }\n    }\n    return default_value;\n  }\n\n  resize(width: number, height: number, default_value: () => T) {\n    if (height < this.game_data.height) {\n      this.data = this.data.slice(0, height);\n    }\n    if (height > this.game_data.height) {\n      const arr = new Array(height - this.game_data.height)\n        .fill(null)\n        .map(() =>\n          new Array(this.game_data.width).fill(null).map(default_value)\n        );\n      this.data.push(...arr);\n    }\n\n    if (width < this.game_data.width) {\n      this.data = this.data.map((e) => e.slice(0, width));\n    }\n\n    if (width > this.game_data.width) {\n      const delta = width - this.game_data.width;\n      this.data.forEach((e) => {\n        e.push(...Array(delta).fill(null).map(default_value));\n      });\n    }\n    this.game_data = {\n      ...this.game_data,\n      width,\n      height,\n    };\n  }\n\n  removeRow(start: number, amount: number = 1) {\n    if (amount < 0) {\n      throw RangeError('The amount of rows to remove cannot be less than 0');\n    }\n    amount = Math.min(amount, this.game_data.height);\n    this.data = [\n      ...this.data.slice(0, start),\n      ...this.data.slice(start + amount),\n    ];\n    this.game_data = {\n      ...this.game_data,\n      height: this.data.length,\n    };\n  }\n\n  removeColumn(start: number, amount: number = 1) {\n    if (amount < 0) {\n      throw RangeError('The amount of rows to remove cannot be less than 0');\n    }\n    amount = Math.min(amount, this.game_data.width);\n\n    this.data = this.data.map((e) => [\n      ...e.slice(0, start),\n      ...e.slice(start + amount),\n    ]);\n    this.game_data = {\n      ...this.game_data,\n      width: this.game_data.width - amount,\n    };\n  }\n}\n\nexport class Game extends AbstractGame {}\n"]}